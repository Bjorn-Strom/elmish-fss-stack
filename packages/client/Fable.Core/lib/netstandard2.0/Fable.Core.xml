<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fable.Core</name></assembly>
<members>
<member name="M:Fable.Import.JS.obsolete``1">
<summary>
 Use Fable.Core.JS
</summary>
</member>
<member name="T:Fable.Core.U8`8">
<summary>
 Erased union type to represent one of eight possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U7`7">
<summary>
 Erased union type to represent one of seven possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U6`6">
<summary>
 Erased union type to represent one of six possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U5`5">
<summary>
 Erased union type to represent one of five possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U4`4">
<summary>
 Erased union type to represent one of four possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U3`3">
<summary>
 Erased union type to represent one of three possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U2`2">
<summary>
 Erased union type to represent one of two possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.ITypeResolver`1">
<summary>
 Can be used in an optional argument decorated with Inject attribute
 to automatically pass generic information without inlining the method
</summary>
</member>
<member name="T:Fable.Core.NoOverloadSuffixAttribute">
<summary>
 Intended for replacement types in Fable.Library
</summary>
</member>
<member name="T:Fable.Core.InjectAttribute">
<summary>
 Experimental: Currently only intended for some specific libraries
</summary>
</member>
<member name="T:Fable.Core.ParamListAttribute">
<summary>
 Used to spread the last argument. Mainly intended for `React.createElement` binding, not for general use.
</summary>
</member>
<member name="T:Fable.Core.StringEnumAttribute">
<summary>
 Compile union types as string literals.
 More info: http://fable.io/docs/interacting.html#StringEnum-attribute
</summary>
</member>
<member name="T:Fable.Core.EmitPropertyAttribute">
<summary>
 Same as `Emit(&quot;$0.propertyName{{=$1}}&quot;)`
</summary>
</member>
<member name="T:Fable.Core.EmitIndexerAttribute">
<summary>
 Same as `Emit(&quot;$0[$1]{{=$2}}&quot;)`
</summary>
</member>
<member name="T:Fable.Core.EmitConstructorAttribute">
<summary>
 Same as `Emit(&quot;new $0($1...)&quot;)`
</summary>
</member>
<member name="T:Fable.Core.EmitMethodAttribute">
<summary>
 Same as `Emit(&quot;$0.methodName($1...)&quot;)`
</summary>
</member>
<member name="T:Fable.Core.EmitAttribute">
<summary>
 Function calls will be replaced by inlined JS code.
 More info: http://fable.io/docs/interacting.html#emit-attribute
</summary>
</member>
<member name="T:Fable.Core.ImportAllAttribute">
<summary>
 Same as `Import(&quot;*&quot;, &quot;my-package&quot;)`
</summary>
</member>
<member name="T:Fable.Core.ImportDefaultAttribute">
<summary>
 Same as `Import(&quot;default&quot;, &quot;my-package&quot;)`
</summary>
</member>
<member name="T:Fable.Core.ImportMemberAttribute">
<summary>
 Takes the member name from the value it decorates
</summary>
</member>
<member name="T:Fable.Core.ImportAttribute">
<summary>
 References to the module, type, function... will be replaced by import statements.
 Use `[&lt;Import(&quot;default&quot;, &quot;my-package&quot;)&gt;] to import the default member.
 Use `[&lt;Import(&quot;*&quot;, &quot;my-package&quot;)&gt;] to import the whole package.
 More info: http://fable.io/docs/interacting.html#Import-attribute
</summary>
</member>
<member name="T:Fable.Core.GlobalAttribute">
<summary>
 The module, type, function... is globally accessible in JS.
 More info: http://fable.io/docs/interacting.html#Import-attribute
</summary>
</member>
<member name="T:Fable.Core.EraseAttribute">
<summary>
 Used for erased union types and to ignore modules in JS compilation.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.AttachMembersAttribute">
<summary>
 Used on a class to attach all members, useful when you want to use the class from JS.
</summary>
</member>
<member name="T:Fable.Core.MangleAttribute">
<summary>
 Used on interfaces to mangle member names. This allows overloading and
 prevents conflicts with other interfaces, but cannot be used to interact with JS.
</summary>
</member>
<member name="F:Fable.Core.CaseRules.KebabCase">
<summary>
 FooBar -&gt; foo-bar
</summary>
</member>
<member name="F:Fable.Core.CaseRules.SnakeCaseAllCaps">
<summary>
 FooBar -&gt; FOO_BAR
</summary>
</member>
<member name="F:Fable.Core.CaseRules.SnakeCase">
<summary>
 FooBar -&gt; foo_bar
</summary>
</member>
<member name="F:Fable.Core.CaseRules.LowerFirst">
<summary>
 FooBar -&gt; fooBar
</summary>
</member>
<member name="M:Fable.Core.Experimental.casenameWithFieldIndex``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Reads the case name and field index of a simple match: `casenameWithFieldIndex(function Bar(_,i) -&gt; i | _ -&gt; failwith &quot;&quot;)`
</summary>
</member>
<member name="M:Fable.Core.Experimental.casenameWithFieldCount``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})">
<summary>
 Reads the case name and field count of a simple match: `casenameWithFieldCount(function Foo _ -&gt; true | _ -&gt; false)`
</summary>
</member>
<member name="M:Fable.Core.Experimental.nameofLambda``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Reads the name of a property or a type from the lambda body
</summary>
</member>
<member name="M:Fable.Core.Experimental.nameof2``1(``0)">
<summary>
 Like nameof but also returns the expression as second element of the tuple
</summary>
</member>
<member name="M:Fable.Core.Experimental.nameof``1(``0)">
<summary>
 Reads the name of an identifier, a property or a type
</summary>
</member>
<member name="M:Fable.Core.Util.jsNative``1">
<summary>
 Used to indicate that a member is only implemented in native Javascript
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsFunc">
<summary>
 Use it when importing dynamic functions from JS. If you need a constructor, use `JsConstructor`.

 ## Sample
     let f: JsFunc = import &quot;myFunction&quot; &quot;./myLib&quot;
     f.Invoke(5, &quot;bar&quot;)
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importValueDynamic``1(``0)">
<summary>
 Imports a reference from an external file dynamically at runtime
 ATTENTION: Pass the reference directly in argument position (avoid pipes)
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importDynamic``1(System.String)">
<summary>
 Imports a file dynamically at runtime
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importSideEffects(System.String)">
<summary>
 Imports a file only for its side effects
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importAll``1(System.String)">
<summary>
 F#: let myLib = importAll&lt;obj&gt; &quot;myLib&quot;
 JS: import * as myLib from &quot;myLib&quot;
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importDefault``1(System.String)">
<summary>
 F#: let defaultMember = importDefault&lt;unit-&gt;obj&gt; &quot;myModule&quot;
 JS: import defaultMember from &quot;myModule&quot;
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importMember``1(System.String)">
<summary>
 F#: let myMember = importMember&lt;string&gt; &quot;myModule&quot;
 JS: import { myMember } from &quot;myModule&quot;
 Note the import must be immediately assigned to a value in a let binding
</summary>
</member>
<member name="M:Fable.Core.JsInterop.import``1(System.String,System.String)">
<summary>
 Works like `ImportAttribute` (same semantics as ES6 imports).
 You can use &quot;*&quot; or &quot;default&quot; selectors.
</summary>
</member>
<member name="M:Fable.Core.JsInterop.exportDefault(System.Object)">
<summary>
 Makes an expression the default export for the JS module.
 Used to interact with JS tools that require a default export.
 ATTENTION: This statement must appear on the root level of the file module.
</summary>
</member>
<member name="M:Fable.Core.JsInterop.isNullOrUndefined(System.Object)">
<summary>
 JS non-strict null checking
</summary>
</member>
<member name="M:Fable.Core.JsInterop.isIn(System.String,System.Object)">
<summary>
 Alias of `jsIn`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.jsConstructor``1">
<summary>
 Get the JS function constructor for class types
</summary>
</member>
<member name="M:Fable.Core.JsInterop.toPlainJsObj``1(``0)">
<summary>
 Used when you need to send an F# record to a JS library accepting only plain JS objects (POJOs)
</summary>
</member>
<member name="M:Fable.Core.JsInterop.createEmpty``1">
<summary>
 Create an empty JS object: {}
</summary>
</member>
<member name="M:Fable.Core.JsInterop.jsOptions``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Create a literal JS object from a mutator lambda. Normally used when
 the options interface has too many fields to be represented with a Pojo record.
 E.g. `jsOptions&lt;MyOpt&gt; (fun o -&gt; o.foo &lt;- 5)` in JS becomes `{ foo: 5 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.keyValueList``1(Fable.Core.CaseRules,System.Collections.Generic.IEnumerable{``0})">
<summary>
 Create a literal JS object from a collection of union constructors.
 E.g. `keyValueList CaseRules.LowerFirst [ MyUnion 4 ]` in JS becomes `{ myUnion: 4 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.createObj``1(``0)">
<summary>
 Create a literal JS object from a collection of key-value tuples.
 E.g. `createObj [ &quot;a&quot; ==&gt; 5 ]` in JS becomes `{ a: 5 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.emitJsStatement``1(System.Object,System.String)">
<summary>
 Same as emitJsExpr but intended for JS code that must appear in a statement position
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements
 E.g. `emitJsExpr aValue &quot;while($0 &lt; 5) doSomething()&quot;`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.emitJsExpr``1(System.Object,System.String)">
<summary>
 Destructure a tuple of arguments and applies to literal JS code as with EmitAttribute.
 E.g. `emitJsExpr (arg1, arg2) &quot;$0 + $1&quot;` in JS becomes `arg1 + arg2`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.createNew(System.Object,System.Object)">
<summary>
 Destructure and apply a tuple to an arbitrary value with `new` keyword.
 E.g. `createNew myCons (arg1, arg2)` in JS becomes `new myCons(arg1, arg2)`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_EqualsEqualsGreater(System.String,System.Object)">
<summary>
 Upcast the right operand to obj (and uncurry it if it&apos;s a function) and create a key-value tuple.
 Mostly convenient when used with `createObj`.
 E.g. `createObj [ &quot;a&quot; ==&gt; 5 ]` in JS becomes `{ a: 5 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_Dollar``1(System.Object,System.Object)">
<summary>
 Destructure and apply a tuple to an arbitrary value.
 E.g. `myFn $ (arg1, arg2)` in JS becomes `myFn(arg1, arg2)`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_DynamicAssignment(System.Object,System.Object,System.Object)">
<summary>
 Dynamically assign a value to a property of an arbitrary object.
 `myObj?propA &lt;- 5` in JS becomes `myObj.propA = 5`
 `myObj?(propA) &lt;- 5` in JS becomes `myObj[propA] = 5`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_Dynamic``1(System.Object,System.Object)">
<summary>
 Dynamically access a property of an arbitrary object.
 `myObj?propA` in JS becomes `myObj.propA`
 `myObj?(propA)` in JS becomes `myObj[propA]`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_BangHat``2(``0)">
<summary>
 Implicit cast for erased unions (U2, U3...)
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_BangBang``2(``0)">
<summary>
 Has same effect as `unbox` (dynamic casting erased in compiled JS code).
 The casted type can be defined on the call site: `!!myObj?bar(5): float`
</summary>
</member>
<member name="M:Fable.Core.Extensions.[]`1.get_byteLength``1(``0[])">
<summary>
 Only valid on numeric arrays compiled as JS TypedArrays
</summary>
</member>
<member name="M:Fable.Core.Extensions.[]`1.get_byteOffset``1(``0[])">
<summary>
 Only valid on numeric arrays compiled as JS TypedArrays
</summary>
</member>
<member name="M:Fable.Core.Extensions.[]`1.get_buffer``1(``0[])">
<summary>
 Only valid on numeric arrays compiled as JS TypedArrays
</summary>
</member>
</members>
</doc>
