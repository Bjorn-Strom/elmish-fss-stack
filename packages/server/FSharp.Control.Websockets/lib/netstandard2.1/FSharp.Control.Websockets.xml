<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Control.Websockets</name></assembly>
<members>
<member name="M:FSharp.Control.Websockets.Async.AwaitTaskWithCancellation``1(Microsoft.FSharp.Core.FSharpFunc{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
<summary>
 **Description**

 Turn a function return a task that uses a cancelltionToken into an FSharp Async

 **Parameters**
   * `f` - parameter of type `CancellationToken -&gt; Task&lt;&apos;a&gt;`

 **Output Type**
   * `Async&lt;&apos;a&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.Async.AwaitTaskWithCancellation(Microsoft.FSharp.Core.FSharpFunc{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
<summary>
 **Description**

 Turn a function return a task that uses a cancelltionToken into an FSharp Async

 **Parameters**
   * `f` - parameter of type `CancellationToken -&gt; Task`

 **Output Type**
   * `Async&lt;unit&gt;`

 **Exceptions**

</summary>
</member>
<member name="P:FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket.State">
<summary>
 Returns the current state of the WebSocket connection.
</summary>
</member>
<member name="P:FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket.CloseStatusDescription">
<summary>
Allows the remote endpoint to describe the reason why the connection was closed.
</summary>
</member>
<member name="P:FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket.CloseStatus">
<summary>
 Indicates the reason why the remote endpoint initiated the close handshake.
</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket.System-IDisposable-Dispose">
<summary>
 Used to clean up unmanaged resources for ASP.NET and self-hosted implementations.
</summary>
</member>
<member name="T:FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket">
<summary>
 The ThreadSafeWebSocket record allows applications to send and receive data after the WebSocket upgrade has completed.  This puts a `MailboxProcessor` in front of all send and receive messages to prevent multiple threads reading or writing to the socket at a time. Without this a websocket send/receive may throw a `InvalidOperationException` with the message:

 `There is already one outstanding &apos;SendAsync&apos; call for this WebSocket instance. ReceiveAsync and SendAsync can be called simultaneously, but at most one outstanding operation for each of them is allowed at the same time.`
</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.closeOutput(FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket,System.Net.WebSockets.WebSocketCloseStatus,System.String)">
<summary>
 **Description**

 Initiates or completes the close handshake defined in the http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06.

 **Parameters**
   * `threadSafeWebSocket` - parameter of type `ThreadSafeWebSocket`
   * `closeStatus` - parameter of type `WebSocketCloseStatus` - Indicates the reason for closing the WebSocket connection.
   * `statusDescription` - parameter of type `string`Specifies a human readable explanation as to why the connection is closed.

 **Output Type**
   * `Async&lt;Result&lt;unit,ExceptionDispatchInfo&gt;&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.close(FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket,System.Net.WebSockets.WebSocketCloseStatus,System.String)">
<summary>
 **Description**

 Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06 section 7.

 **Parameters**
   * `threadSafeWebSocket` - parameter of type `ThreadSafeWebSocket`
   * `closeStatus` - parameter of type `WebSocketCloseStatus` - Indicates the reason for closing the WebSocket connection.
   * `statusDescription` - parameter of type `string` -  Specifies a human readable explanation as to why the connection is closed.

 **Output Type**
   * `Async&lt;Result&lt;unit,ExceptionDispatchInfo&gt;&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.receiveMessageAsUTF8(FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket)">
<summary>
 **Description**

 Reads an entire message as a string.

 **Parameters**
   * `threadSafeWebSocket` - parameter of type `ThreadSafeWebSocket`

 **Output Type**
   * `Async&lt;Result&lt;WebSocket.ReceiveUTF8Result,ExceptionDispatchInfo&gt;&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.receiveMessage(FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket,System.Int32,System.Net.WebSockets.WebSocketMessageType,System.IO.Stream)">
<summary>
 **Description**

 Reads an entire message from a websocket as a string.

 **Parameters**
   * `threadSafeWebSocket` - parameter of type `ThreadSafeWebSocket`
   * `bufferSize` - parameter of type `int` - How many bytes to read from the socket at a time.  Recommended to use `DefaultBufferSize`.
   * `messageType` - parameter of type `WebSocketMessageType` -  Indicates whether the application is sending a binary or text message.
   * `writeableStream` - parameter of type `IO.Stream` - A writeable stream that data from the websocket is written into.

 **Output Type**
   * `Async&lt;Result&lt;WebSocket.ReceiveStreamResult,ExceptionDispatchInfo&gt;&gt;` - One of the possible results from reading a whole message from a websocket

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.sendMessageAsUTF8(FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket,System.String)">
<summary>
 **Description**

 Sends a string as UTF8 over a websocket connection.

 **Parameters**
   * `threadSafeWebSocket` - parameter of type `ThreadSafeWebSocket`
   * `text` - parameter of type `string` - The string to send over the websocket.

 **Output Type**
   * `Async&lt;Result&lt;unit,ExceptionDispatchInfo&gt;&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.sendMessage``1(FSharp.Control.Websockets.ThreadSafeWebSocket.ThreadSafeWebSocket,System.Int32,System.Net.WebSockets.WebSocketMessageType,``0)">
<summary>
 **Description**

 Sends a whole message to the websocket read from the given stream.

 **Parameters**
   * `threadSafeWebSocket` - parameter of type `ThreadSafeWebSocket`
   * `bufferSize` - parameter of type `int` - How many bytes to read from the stream at a time.  Recommended to use `DefaultBufferSize`.
   * `messageType` - parameter of type `WebSocketMessageType` -  Indicates whether the application is sending a binary or text message.
   * `readableStream` - parameter of type `Stream` - A readable stream of data to send over the websocket connection.

 **Output Type**
   * `Async&lt;Result&lt;unit,ExceptionDispatchInfo&gt;&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.ThreadSafeWebSocket.createFromWebSocket(System.Net.WebSockets.WebSocket)">
<summary>
 **Description**

 Creates a `ThreadSafeWebSocket` from an existing `WebSocket`.

 **Parameters**
   * `webSocket` - parameter of type `WebSocket`

 **Output Type**
   * `ThreadSafeWebSocket`

 **Exceptions**

</summary>
</member>
<member name="T:FSharp.Control.Websockets.WebSocket.ReceiveUTF8Result.Closed">
<summary>
 The websocket was closed during reading.
</summary>
</member>
<member name="T:FSharp.Control.Websockets.WebSocket.ReceiveUTF8Result.String">
<summary>
 Reading from the websocket completed.
</summary>
</member>
<member name="T:FSharp.Control.Websockets.WebSocket.ReceiveUTF8Result">
<summary>
 One of the possible results from reading a whole message from a websocket.
</summary>
</member>
<member name="T:FSharp.Control.Websockets.WebSocket.ReceiveStreamResult.Closed">
<summary>
 The websocket was closed during reading
</summary>
</member>
<member name="T:FSharp.Control.Websockets.WebSocket.ReceiveStreamResult.Stream">
<summary>
 Reading from the websocket completed
</summary>
</member>
<member name="T:FSharp.Control.Websockets.WebSocket.ReceiveStreamResult">
<summary>
 One of the possible results from reading a whole message from a websocket.
</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.receiveMessageAsUTF8``1(System.Net.WebSockets.WebSocket)">
<summary>
 **Description**

 Reads an entire message as a string.

 **Parameters**
   * `socket` - parameter of type `WebSocket`

 **Output Type**
   * `Async&lt;ReceiveUTF8Result&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.receiveMessage(System.Net.WebSockets.WebSocket,System.Int32,System.Net.WebSockets.WebSocketMessageType,System.IO.Stream)">
<summary>
 **Description**

 Reads an entire message from a websocket.

 **Parameters**
   * `socket` - parameter of type `WebSocket`
   * `bufferSize` - parameter of type `int` - How many bytes to read from the socket at a time.  Recommended to use `DefaultBufferSize`.
   * `messageType` - parameter of type `WebSocketMessageType` -  Indicates whether the application is receiving a binary or text message.
   * `writeableStream` - parameter of type `IO.Stream` - A writeable stream that data from the websocket is written into.

 **Output Type**
   * `Async&lt;ReceiveStreamResult&gt;` - One of the possible results from reading a whole message from a websocket

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.sendMessageAsUTF8(System.Net.WebSockets.WebSocket,System.String)">
<summary>
 **Description**

 Sends a string as UTF8 over a websocket connection.

 **Parameters**
   * `socket` - parameter of type `WebSocket`
   * `text` - parameter of type `string` - The string to send over the websocket.

 **Output Type**
   * `Async&lt;unit&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.sendMessage``1(System.Net.WebSockets.WebSocket,System.Int32,System.Net.WebSockets.WebSocketMessageType,``0)">
<summary>
 **Description**

 Sends a whole message to the websocket read from the given stream

 **Parameters**
   * `socket` - parameter of type `WebSocket`
   * `bufferSize` - parameter of type `int` - How many bytes to read from the stream at a time.  Recommended to use `DefaultBufferSize`.
   * `messageType` - parameter of type `WebSocketMessageType` -  Indicates whether the application is sending a binary or text message.
   * `readableStream` - parameter of type `Stream` - A readable stream of data to send over the websocket connection.

 **Output Type**
   * `Async&lt;unit&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.asyncCloseOutput(System.Net.WebSockets.WebSocket,System.Net.WebSockets.WebSocketCloseStatus,System.String)">
<summary>
 **Description**

 Initiates or completes the close handshake defined in the http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06.

 **Parameters**
   * `websocket` - parameter of type `WebSocket`
   * `closeStatus` - parameter of type `WebSocketCloseStatus` - Indicates the reason for closing the WebSocket connection.
   * `statusDescription` - parameter of type `string`Specifies a human readable explanation as to why the connection is closed.

 **Output Type**
   * `Async&lt;unit&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.asyncClose(System.Net.WebSockets.WebSocket,System.Net.WebSockets.WebSocketCloseStatus,System.String)">
<summary>
 **Description**

 Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06 section 7.

 **Parameters**
   * `websocket` - parameter of type `WebSocket`
   * `closeStatus` - parameter of type `WebSocketCloseStatus` - Indicates the reason for closing the WebSocket connection.
   * `statusDescription` - parameter of type `string` -  Specifies a human readable explanation as to why the connection is closed.

 **Output Type**
   * `Async&lt;unit&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.asyncSend(System.Net.WebSockets.WebSocket,System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
<summary>
 **Description**

 Sends data over the `System.Net.WebSockets.WebSocket` connection asynchronously.

 **Parameters**
   * `websocket` - parameter of type `WebSocket`
   * `buffer` - parameter of type `ArraySegment&lt;byte&gt;` - The buffer to be sent over the connection.
   * `messageType` - parameter of type `WebSocketMessageType`- Indicates whether the application is sending a binary or text message.
   * `endOfMessage` - parameter of type `bool` - Indicates whether the data in `buffer` is the last part of a message.

 **Output Type**
   * `Async&lt;unit&gt;`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.asyncReceive(System.Net.WebSockets.WebSocket,System.ArraySegment{System.Byte})">
<summary>
 **Description**

 Receives data from the `System.Net.WebSockets.WebSocket` connection asynchronously.

 **Parameters**
   * `websocket` - parameter of type `WebSocket`
   * `buffer` - parameter of type `ArraySegment&lt;byte&gt;` - References the application buffer that is the storage location for the received data.

 **Output Type**
   * `Async&lt;WebSocketReceiveResult&gt;` - An instance of this class represents the result of performing a single ReceiveAsync operation on a WebSocket.

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.WebSocket.isWebsocketOpen(System.Net.WebSockets.WebSocket)">
<summary>
 **Description**

 Determines if the websocket is open

 **Parameters**
   * `socket` - parameter of type `WebSocket`

 **Output Type**
   * `bool`

 **Exceptions**

</summary>
</member>
<member name="P:FSharp.Control.Websockets.WebSocket.DefaultBufferSize">
<summary>
 **Description**

 Same as the `DefaultReceiveBufferSize` and `DefaultClientSendBufferSize` from the internal [WebSocketHelpers]( https://referencesource.microsoft.com/#System/net/System/Net/WebSockets/WebSocketHelpers.cs,285b8b64a4da6851).

 Current value: 16384

 **Output Type**
   * `int`
</summary>
</member>
<member name="M:FSharp.Control.Websockets.Stream.MemoryStream.ToUTF8String(System.IO.MemoryStream)">
<summary>
 **Description**

 Turns a `MemoryStream` into a a UTF8 string

 **Parameters**


 **Output Type**
   * `string`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.Stream.MemoryStream.ToUTF8String.Static(System.IO.MemoryStream)">
<summary>
 **Description**

 Turns a `MemoryStream` into a a UTF8 string

 **Parameters**
   * `stream` - parameter of type `IO.MemoryStream`

 **Output Type**
   * `string`

 **Exceptions**

</summary>
</member>
<member name="M:FSharp.Control.Websockets.Stream.MemoryStream.UTF8toMemoryStream.Static(System.String)">
<summary>
 **Description**

 Turns a string into a UTF8 MemoryStream

 **Parameters**
   * `text` - parameter of type `string`

 **Output Type**
   * `IO.MemoryStream`

 **Exceptions**

</summary>
</member>
</members>
</doc>
